#!/usr/bin/env python

'''
Combine per-chromosome LIden output in linked_region.txt

Created on July 22, 2013
@author: shvenkat
'''

import sys
import os
import re

##
# Global constants
#
Chromosomes = [str(i) for i in range(1, 23)] + ['X', 'Y', 'MT']
Subsets = [str(i) for i in range(0, 5)]
HeaderPattern = re.compile(r"^Solution (\d+):$")
InDir = 'liden_output'
OutDir = 'results'

##
# functions
#
def main():
    if len(sys.argv) > 1:
        sys.stderr.write('Usage: ' + sys.argv[0] + '\n')
        sys.stderr.write('Options and arguments are not supported\n')
        sys.exit(1)
    try:
        outFile = open(os.path.join(OutDir, 'linked_region.txt'), 'w')
    except IOError as e:
        sys.stderr.write("Error opening output file, I/O error {0}: {1}\n".format(e.errno, e.strerror))
        sys.exit(e.errno)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise
    runs = [(chrom, subset) for chrom in Chromosomes for subset in Subsets]
    solutions = [getSolutions(chrom, subset,
        os.path.join(InDir,
            ''.join(['chr', chrom]),
            ''.join(['subset.', subset]))) for (chrom, subset) in runs]
    outFile.write('\t'.join(['Chromosome', 'Subset', 'Solution', 'Start',
        'End']) + '\n')
    outFile.writelines([s + '\n' for item in solutions for s in item])
    outFile.close()

def getSolutions(chrom, subset, runDir):
    try:
        f = open(os.path.join(runDir, 'linked_region.txt'), 'r')
    except IOError as e:
        sys.stderr.write("Error reading LIden results for chr{0} subset {1}: I/O error {2}, {3}\n".format(chrom, subset, e.errno, e.strerror))
        return []
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise
    lines = f.readlines()
    f.close()
    return ['\t'.join([chrom, subset, p]) for p in parseLines(lines)]

def parseLines(lines):
    state = 0
    output = []
    for line in lines:
        line = line.rstrip()
        match = HeaderPattern.search(line)
        if match is not None:
            state = match.group(1)
            continue
        elif state == 0:
            return
        else:
            fields = line.split()
            output.append('\t'.join([state, fields[0], fields[2]]))
    return output

##
# main
#
main()
